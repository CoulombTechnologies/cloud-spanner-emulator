# Basic foreign key syntax.
CREATE TABLE T (
  A BOOL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X BOOL,
  CONSTRAINT C FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X);
==
# Keywords should work case-insensitive while preserving identifier case.
create table t (
  a bool,
) primary key(a);
create table u (
  x bool,
  constraint c foreign key(x) references t(a),
) primary key(x);
--
CREATE TABLE t (
  a BOOL,
) PRIMARY KEY(a);
CREATE TABLE u (
  x BOOL,
  CONSTRAINT c FOREIGN KEY(x) REFERENCES t(a),
) PRIMARY KEY(x);
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B STRING(MAX) NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y STRING(MAX),
  Z INT64,
  FOREIGN KEY(Y) REFERENCES T(B),
  CONSTRAINT FK FOREIGN KEY(Y, Z) REFERENCES T(B, A),
) PRIMARY KEY(X);
==
CREATE TABLE T (
  A STRING(MAX) NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X STRING(32) NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X);
==
CREATE TABLE T (
  A STRING(MAX) NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X STRING(32) NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X);
ALTER TABLE U ALTER COLUMN X STRING(64) NOT NULL;
--
CREATE TABLE T (
  A STRING(MAX) NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X STRING(64) NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X);
==
CREATE TABLE T (
  A STRING(MAX) NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X STRING(32) NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X);
ALTER TABLE T ALTER COLUMN A STRING(64) NOT NULL;
--
CREATE TABLE T (
  A STRING(64) NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X STRING(32) NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X);
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64,
  C INT64 NOT NULL,
) PRIMARY KEY(A DESC, B, C);
CREATE TABLE U (
  P INT64 NOT NULL,
  Q INT64 NOT NULL,
  R INT64 NOT NULL,
  FOREIGN KEY(P, R, Q) REFERENCES T(A, C, B),
  FOREIGN KEY(P, R, Q) REFERENCES T(A, B, C),
  FOREIGN KEY(P, Q) REFERENCES T(A, B),
  FOREIGN KEY(Q, R) REFERENCES T(A, B),
  FOREIGN KEY(P, Q) REFERENCES T(B, C),
) PRIMARY KEY(P, Q DESC, R);
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A, B);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X, Y) REFERENCES T(A, B),
) PRIMARY KEY(X);
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X, Y) REFERENCES T(A, B),
) PRIMARY KEY(X, Y);
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A, B);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64,
  FOREIGN KEY(X, Y) REFERENCES T(A, B),
) PRIMARY KEY(X, Y);
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A, B);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
) PRIMARY KEY(X, Y);
ALTER TABLE U ADD FOREIGN KEY(X) REFERENCES T(A);
ALTER TABLE T ADD FOREIGN KEY(B) REFERENCES U(X);
ALTER TABLE U ADD FOREIGN KEY(X) REFERENCES T(A);
ALTER TABLE U ADD CONSTRAINT C FOREIGN KEY(X) REFERENCES T(A);
ALTER TABLE T ADD CONSTRAINT D FOREIGN KEY(B) REFERENCES U(X);
--
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
  FOREIGN KEY(B) REFERENCES U(X),
  CONSTRAINT D FOREIGN KEY(B) REFERENCES U(X),
) PRIMARY KEY(A, B);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A),
  FOREIGN KEY(X) REFERENCES T(A),
  CONSTRAINT C FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X, Y);
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A, B);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X, Y) REFERENCES T(B, A),
  FOREIGN KEY(X, Y) REFERENCES T(B, A),
  CONSTRAINT D FOREIGN KEY(Y) REFERENCES T(B),
) PRIMARY KEY(X, Y);
ALTER TABLE T ADD CONSTRAINT C FOREIGN KEY(A) REFERENCES T(B);
ALTER TABLE T ADD CONSTRAINT E FOREIGN KEY(B) REFERENCES U(X);
ALTER TABLE U DROP CONSTRAINT FK_U_T_FFADEDEE3430D435_2;
ALTER TABLE U DROP CONSTRAINT D;
ALTER TABLE T DROP CONSTRAINT E;
ALTER TABLE T DROP CONSTRAINT C;
--
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A, B);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X, Y) REFERENCES T(B, A),
) PRIMARY KEY(X, Y);
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A, B);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X, Y) REFERENCES T(B, A),
  FOREIGN KEY(X, Y) REFERENCES T(B, A),
  CONSTRAINT D FOREIGN KEY(Y) REFERENCES T(B),
) PRIMARY KEY(X, Y);
DROP TABLE U;
--
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A, B);
==
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A)
) PRIMARY KEY(X);
--
ERROR: Table not found: T
==
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  CONSTRAINT T FOREIGN KEY(X) REFERENCES T(A)
) PRIMARY KEY(X);
--
ERROR: Duplicate name in schema: T.
==
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
) PRIMARY KEY(X);
ALTER TABLE U ADD CONSTRAINT T FOREIGN KEY(X) REFERENCES T(A);
--
ERROR: Duplicate name in schema: T.
==
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  CONSTRAINT _T FOREIGN KEY(X) REFERENCES T(A)
) PRIMARY KEY(X);
--
ERROR: Foreign Key name not valid: _T.
==
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
) PRIMARY KEY(X);
ALTER TABLE U ADD CONSTRAINT _T FOREIGN KEY(X) REFERENCES T(A);
--
ERROR: Foreign Key name not valid: _T.
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X,X) REFERENCES T(A,B)
) PRIMARY KEY(X);
--
ERROR: Column `X` used more than once for table `U` in foreign key `FK_U_T_FFADEDEE3430D435_1`.
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X,Y) REFERENCES T(A,A)
) PRIMARY KEY(X);
--
ERROR: Column `A` used more than once for table `U` in foreign key `FK_U_T_FFADEDEE3430D435_1`.
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(X,Y) REFERENCES T(A)
) PRIMARY KEY(X);
--
ERROR: The number of columns are different for table `U` and table `T` in foreign key `FK_U_T_FFADEDEE3430D435_1`.
==
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY() REFERENCES T(A)
) PRIMARY KEY(X);
--
ERROR: Errors parsing Spanner DDL statement:
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY() REFERENCES T(A)
) PRIMARY KEY(X) has errors:
-Syntax error on line 4, column 15: Expecting 'EOF' but found ')'
-Syntax error on line 4, column 15: Encountered ')' while parsing: identifier
==
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T()
) PRIMARY KEY(X);
--
ERROR: Errors parsing Spanner DDL statement:
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T()
) PRIMARY KEY(X) has errors:
-Syntax error on line 4, column 31: Expecting 'EOF' but found ')'
-Syntax error on line 4, column 31: Encountered ')' while parsing: identifier
==
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(A)
) PRIMARY KEY(X);
--
ERROR: Column `Y` not found for table `U` in foreign key `FK_U_T_FFADEDEE3430D435_1`.
==
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(B)
) PRIMARY KEY(X);
--
ERROR: Column `B` not found for table `T` in foreign key `FK_U_T_FFADEDEE3430D435_1`.
==
CREATE TABLE T (
  A BOOL NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A)
) PRIMARY KEY(X);
--
ERROR: The column types are different for column `X` of table `U` and column `A` of table `T` in foreign key `FK_U_T_FFADEDEE3430D435_1`.
==
CREATE TABLE T (
  A BOOL NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X BOOL NOT NULL,
  CONSTRAINT PK_FK FOREIGN KEY(X) REFERENCES T(A)
) PRIMARY KEY(X);
--
ERROR: Invalid Foreign Key name: PK_FK. Prefix PK_ cannot be used.
==
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(A)
) PRIMARY KEY(X);
CREATE TABLE V (
  Y INT64 NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(A)
) PRIMARY KEY(Y);
DROP TABLE T;
--
ERROR: Cannot drop table `T`. It is referenced by one or more foreign keys: `FK_U_T_FFADEDEE3430D435_1`, `FK_V_T_A032F46D0AA7A2F1_1`. You must drop the foreign keys before dropping the table.
==
CREATE TABLE T (
  A INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(A)
) PRIMARY KEY(X);
ALTER TABLE U ALTER COLUMN Y FLOAT64 NOT NULL;
--
ERROR: Cannot change type of column `Y` from `INT64` to `FLOAT64`
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(B)
) PRIMARY KEY(X);
ALTER TABLE T ALTER COLUMN B FLOAT64 NOT NULL;
--
ERROR: Cannot change type of column `B` from `INT64` to `FLOAT64`
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(B),
) PRIMARY KEY(X);
ALTER TABLE T ALTER COLUMN B INT64;
--
ERROR: Cannot change the nullability for column `B` of table `T`. It is used by one or more foreign keys: `FK_U_T_FFADEDEE3430D435_1`.
==
CREATE TABLE T (
  A INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(A),
) PRIMARY KEY(X);
ALTER TABLE U ALTER COLUMN Y INT64;
--
ERROR: Cannot change the nullability for column `Y` of table `U`. It is used by one or more foreign keys: `FK_U_T_FFADEDEE3430D435_1`.
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y INT64 NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(A),
  FOREIGN KEY(Y) REFERENCES T(B),
) PRIMARY KEY(X);
ALTER TABLE U DROP COLUMN Y;
--
ERROR: Cannot drop column `Y` from table `U`. It is used by one or more foreign keys: `FK_U_T_FFADEDEE3430D435_1`, `FK_U_T_FFADEDEE3430D435_2`. You must drop the foreign keys before dropping the column.
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  FOREIGN KEY(X) REFERENCES T(B),
) PRIMARY KEY(X);
CREATE TABLE V (
  Y INT64 NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(B),
) PRIMARY KEY(Y);
ALTER TABLE T DROP COLUMN B;
--
ERROR: Cannot drop column `B` from table `T`. It is used by one or more foreign keys: `FK_U_T_FFADEDEE3430D435_1`, `FK_V_T_A032F46D0AA7A2F1_1`. You must drop the foreign keys before dropping the column.
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B ARRAY<INT64> NOT NULL
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y ARRAY<INT64> NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(B)
) PRIMARY KEY(X);
--
ERROR: Column `Y` for foreign key `FK_U_T_FFADEDEE3430D435_1` on table `U` has an unsupported type.
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B TIMESTAMP NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y TIMESTAMP NOT NULL OPTIONS(allow_commit_timestamp=true),
  FOREIGN KEY(Y) REFERENCES T(B)
) PRIMARY KEY(X);
--
ERROR: Commit timestamp column is not supported for column `Y` of table `U` in foreign key `FK_U_T_FFADEDEE3430D435_1`.
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B TIMESTAMP NOT NULL OPTIONS(allow_commit_timestamp=true),
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y TIMESTAMP NOT NULL,
  FOREIGN KEY(Y) REFERENCES T(B)
) PRIMARY KEY(X);
--
ERROR: Commit timestamp column is not supported for column `B` of table `U` in foreign key `FK_U_T_FFADEDEE3430D435_1`.
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B TIMESTAMP,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y TIMESTAMP,
  FOREIGN KEY(Y) REFERENCES T(B)
) PRIMARY KEY(X);
ALTER TABLE U ALTER COLUMN Y SET OPTIONS (allow_commit_timestamp = true);
--
ERROR: Cannot set the commit_timestamp option for column `Y` of table `U`. It is used by one or more foreign keys: `FK_U_T_FFADEDEE3430D435_1`.
==
CREATE TABLE T (
  A INT64 NOT NULL,
  B TIMESTAMP,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  Y TIMESTAMP,
  FOREIGN KEY(Y) REFERENCES T(B)
) PRIMARY KEY(X);
ALTER TABLE T ALTER COLUMN B SET OPTIONS (allow_commit_timestamp = true);
--
ERROR: Cannot set the commit_timestamp option for column `B` of table `T`. It is used by one or more foreign keys: `FK_U_T_FFADEDEE3430D435_1`.
==
CREATE TABLE T (
  A INT64 NOT NULL,
) PRIMARY KEY(A);
ALTER TABLE T DROP CONSTRAINT C;
--
ERROR: C is not a constraint in T
==
CREATE TABLE T (
  A INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  CONSTRAINT C FOREIGN KEY(X) REFERENCES T(A),
  CONSTRAINT C FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(A);
--
ERROR: Duplicate name in schema: C.
==
CREATE TABLE T (
  A INT64 NOT NULL,
) PRIMARY KEY(A);
CREATE TABLE U (
  X INT64 NOT NULL,
  CONSTRAINT C FOREIGN KEY(X) REFERENCES T(A),
) PRIMARY KEY(X);
ALTER TABLE T ADD CONSTRAINT C FOREIGN KEY(A) REFERENCES U(X);
--
ERROR: Duplicate name in schema: C.
==
